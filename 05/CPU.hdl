// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    //Determine Type
    Not(in=instruction[15], out=AinS);
    Not(in=AinS, out=CinS);
    
    And(a=CinS, b=instruction[5], out=ALUtoA);
    Mux16(a=instruction, b=ALUout, sel=ALUtoA, out=Aregin);
    
    Or(a=AinS, b=ALUtoA, out=LoadA);
    ARegister(in=Aregin, load=LoadA, out=OutA);
    
    Mux16(a=OutA, b=inM, sel=instruction[12], out=MuOutA);

    And(a=CinS, b=instruction[4], out=LoadD);
    DRegister(in=ALUout, load=LoadD, out=OutD);
    
    ALU(x=OutD, y=MuOutA, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, zr=Zr, ng=Ng);
        
    //Set outputs for writing memory
    Or16(a=false, b=OutA, out[0..14]=addressM);
    Or16(a=false, b=ALUout, out=outM);
    And(a=CinS, b=instruction[3], out=writeM);
    
    //PC Part
    And(a=Zr, b=instruction[1], out=jeq);
    And(a=Ng, b=instruction[2], out=jlt);

    Or(a=Zr, b=Ng, out=zeroOrNeg);
    Not(in=zeroOrNeg, out=positive);
    
    And(a=positive, b=instruction[0], out=jgt);
    Or(a=jeq, b=jlt, out=jle);
    Or(a=jle, b=jgt, out=jumpToA);
    And(a=CinS, b=jumpToA, out=PCload);

    Not(in=PCload, out=PCinc);
    PC(in=OutA, inc=PCinc, load=PCload, reset=reset, out[0..14]=pc);

    //參考:https://drive.google.com/file/d/1nEptWuRpFF9zmqlKYq6s1UfDB_dd16vx/view
    //參考:https://www.youtube.com/watch?v=qqPlV6bbUBM
}